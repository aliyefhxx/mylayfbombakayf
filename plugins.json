{
  "plugins": [
    "# =================== EKDEDILMIS KOD: .ban v\u0259 .unban ===================\nfrom telethon.tl.functions.channels import EditBannedRequest\nfrom telethon.tl.types import ChatBannedRights\n\n@client.on(events.NewMessage(pattern=r'\\.ban(?: |$)(.*)'))\nasync def ban(event):\n    try:\n        # \u0130stifad\u0259\u00e7i identifikasiyas\u0131\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user_id = replied.sender_id\n        else:\n            args = event.pattern_match.group(1).strip()\n            if not args:\n                return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .ban <ta\u011f v\u0259 ya id> v\u0259 ya reply\")\n            if args.isdigit():\n                user_id = int(args)\n            else:\n                # Ta\u011f istifad\u0259\u00e7i\n                user = await client.get_entity(args)\n                user_id = user.id\n\n        rights = ChatBannedRights(\n            until_date=None,\n            view_messages=True\n        )\n\n        await client(EditBannedRequest(event.chat_id, user_id, rights))\n        await event.edit(f\"\ud83e\udd77 \u0130stifad\u0259\u00e7i {user_id} banland\u0131!\")\n\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n\n\n@client.on(events.NewMessage(pattern=r'\\.unban(?: |$)(.*)'))\nasync def unban(event):\n    try:\n        # \u0130stifad\u0259\u00e7i identifikasiyas\u0131\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user_id = replied.sender_id\n        else:\n            args = event.pattern_match.group(1).strip()\n            if not args:\n                return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .unban <ta\u011f v\u0259 ya id> v\u0259 ya reply\")\n            if args.isdigit():\n                user_id = int(args)\n            else:\n                user = await client.get_entity(args)\n                user_id = user.id\n\n        rights = ChatBannedRights(\n            until_date=None,\n            view_messages=False\n        )\n\n        await client(EditBannedRequest(event.chat_id, user_id, rights))\n        await event.edit(f\"\ud83e\udd77 \u0130stifad\u0259\u00e7i {user_id} ban\u0131 a\u00e7\u0131ld\u0131!\")\n\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "# =================== EKDEDILMIS KOD: .mute / .unmute ===================\nfrom telethon.tl.functions.channels import EditBannedRequest\nfrom telethon.tl.types import ChatBannedRights\n\n@client.on(events.NewMessage(pattern=r'\\.mute'))\nasync def mute(event):\n    sender = await event.get_sender()\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .mute @username v\u0259 ya reply mesajla .mute\")\n        \n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user_to_mute = await client.get_entity(replied.sender_id)\n        else:\n            user_to_mute = await client.get_entity(event.raw_text.split()[1])\n        \n        rights = ChatBannedRights(\n            until_date=None,\n            send_messages=True\n        )\n        await client(EditBannedRequest(event.chat_id, user_to_mute.id, rights))\n        await event.edit(f\" {user_to_mute.username or user_to_mute.first_name} s\u0259ssiz\u0259 al\u0131nd\u0131 \ud83e\udd77\")\n    \n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n\n\n@client.on(events.NewMessage(pattern=r'\\.unmute'))\nasync def unmute(event):\n    sender = await event.get_sender()\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .unmute @username v\u0259 ya reply mesajla .unmute\")\n        \n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user_to_unmute = await client.get_entity(replied.sender_id)\n        else:\n            user_to_unmute = await client.get_entity(event.raw_text.split()[1])\n        \n        rights = ChatBannedRights(\n            until_date=None,\n            send_messages=False\n        )\n        await client(EditBannedRequest(event.chat_id, user_to_unmute.id, rights))\n        await event.edit(f\" {user_to_unmute.username or user_to_unmute.first_name} s\u0259ssizd\u0259n \u00e7\u0131xard\u0131ld\u0131! \ud83e\udd77.\")\n    \n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "# =================== EKDEDILMIS KOD: .warn / .unwarn ===================\nwarns = {}  # chat_id -> {user_id: say}\n\n@client.on(events.NewMessage(pattern=r'\\.warn'))\nasync def warn(event):\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .warn @username v\u0259 ya reply mesajla .warn\")\n        \n        chat_id = event.chat_id\n\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user = replied.sender_id\n            user_name = (await client.get_entity(user)).first_name\n        else:\n            user = (await client.get_entity(event.raw_text.split()[1])).id\n            user_name = (await client.get_entity(user)).first_name\n\n        if chat_id not in warns:\n            warns[chat_id] = {}\n\n        warns[chat_id][user] = warns[chat_id].get(user, 0) + 1\n        await event.edit(f\"\u26a0\ufe0f {user_name} x\u0259b\u0259rdarl\u0131q ald\u0131. (C\u0259mi: {warns[chat_id][user]})\")\n    \n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n\n@client.on(events.NewMessage(pattern=r'\\.unwarn'))\nasync def unwarn(event):\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .unwarn @username v\u0259 ya reply mesajla .unwarn\")\n        \n        chat_id = event.chat_id\n\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user = replied.sender_id\n            user_name = (await client.get_entity(user)).first_name\n        else:\n            user = (await client.get_entity(event.raw_text.split()[1])).id\n            user_name = (await client.get_entity(user)).first_name\n\n        if chat_id in warns and user in warns[chat_id]:\n            warns[chat_id][user] -= 1\n            if warns[chat_id][user] <= 0:\n                warns[chat_id].pop(user)\n            await event.edit(f\" {user_name} x\u0259b\u0259rdarl\u0131\u011f\u0131 al\u0131nd\u0131! \ud83e\udd77 (C\u0259mi: {warns[chat_id].get(user,0)})\")\n        else:\n            await event.edit(f\"\u26a0\ufe0f {user_name}-in x\u0259b\u0259rdarl\u0131\u011f\u0131 yoxdur.\")\n    \n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "from telethon.tl.functions.channels import EditAdminRequest\nfrom telethon.tl.types import ChatAdminRights\n\n@client.on(events.NewMessage(pattern=r'\\.promote'))\nasync def promote(event):\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .promote @username v\u0259 ya reply mesajla .promote\")\n\n        chat = await event.get_chat()\n\n        if event.is_reply:\n            user = (await event.get_reply_message()).sender_id\n        else:\n            user = (await client.get_entity(event.raw_text.split()[1])).id\n\n        rights = ChatAdminRights(\n            change_info=True,\n            delete_messages=True,\n            ban_users=True,\n            invite_users=True,\n            pin_messages=True,\n            add_admins=False\n        )\n\n        await client(EditAdminRequest(chat.id, user, rights, \"Admin\"))\n        await event.edit(\"S\u0259lahiyy\u0259t Verildi! \ud83e\udd77\")\n\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n\n\n@client.on(events.NewMessage(pattern=r'\\.demote'))\nasync def demote(event):\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .demote @username v\u0259 ya reply mesajla .demote\")\n\n        chat = await event.get_chat()\n\n        if event.is_reply:\n            user = (await event.get_reply_message()).sender_id\n        else:\n            user = (await client.get_entity(event.raw_text.split()[1])).id\n\n        rights = ChatAdminRights(\n            change_info=False,\n            delete_messages=False,\n            ban_users=False,\n            invite_users=False,\n            pin_messages=False,\n            add_admins=False\n        )\n\n        await client(EditAdminRequest(chat.id, user, rights, \"Member\"))\n        await event.edit(\"S\u0259lahiyy\u0259t Al\u0131nd\u0131! \ud83e\udd77\")\n\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "# =================== EKDEDILMIS KOD: .block / .unblock ===================\nfrom telethon.tl.functions.contacts import BlockRequest, UnblockRequest\nfrom telethon.errors import UserIdInvalidError\n\n@client.on(events.NewMessage(pattern=r'\\.block'))\nasync def block(event):\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .block @username v\u0259 ya reply mesajla .block\")\n\n        if event.is_reply:\n            user_id = (await event.get_reply_message()).sender_id\n        else:\n            user_id = (await client.get_entity(event.raw_text.split()[1])).id\n\n        await client(BlockRequest(user_id))\n        await event.edit(\"\ud83e\udd77 \u0130stifad\u0259\u00e7i blokland\u0131. S\u0259n pis u\u015faqsan s\u0259ni atd\u0131m bloka \ud83d\ude14\")\n\n    except UserIdInvalidError:\n        await event.edit(\"\u274c Yanl\u0131\u015f ID v\u0259 ya istifad\u0259\u00e7i tap\u0131lmad\u0131.\")\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n\n@client.on(events.NewMessage(pattern=r'\\.unblock'))\nasync def unblock(event):\n    try:\n        if not event.is_reply and len(event.raw_text.split()) < 2:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .unblock @username v\u0259 ya reply mesajla .unblock\")\n\n        if event.is_reply:\n            user_id = (await event.get_reply_message()).sender_id\n        else:\n            user_id = (await client.get_entity(event.raw_text.split()[1])).id\n\n        await client(UnblockRequest(user_id))\n        await event.edit(\" \u0130stifad\u0259\u00e7i blokdan \u00e7\u0131xar\u0131ld\u0131! Yaz\u0131\u011f\u0131m g\u0259ldi a\u00e7d\u0131m bloku \ud83d\ude0f\")\n\n    except UserIdInvalidError:\n        await event.edit(\"\u274c Yanl\u0131\u015f ID v\u0259 ya istifad\u0259\u00e7i tap\u0131lmad\u0131.\")\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "# =================== EKDEDILMIS KOD: .pin / .unpin ===================\nfrom telethon.tl.functions.messages import UpdatePinnedMessageRequest, GetPinnedDialogsRequest\nfrom telethon.errors import ChatAdminRequiredError, MessageIdInvalidError\n\n@client.on(events.NewMessage(pattern=r'\\.unpin'))\nasync def unpin(event):\n    try:\n        # B\u00fct\u00fcn pinl\u0259ri a\u00e7maq \u00fc\u00e7\u00fcn id=0 g\u00f6nd\u0259ririk\n        await client(UpdatePinnedMessageRequest(\n            peer=event.chat_id,\n            id=0\n        ))\n        await event.edit(\"\ud83d\udccc B\u00fct\u00fcn pinl\u0259r l\u0259\u011fv edildi.\")\n\n    except ChatAdminRequiredError:\n        await event.edit(\"\u274c Botun admin h\u00fcququ yoxdur.\")\n    except MessageIdInvalidError:\n        await event.edit(\"\u274c Yanl\u0131\u015f mesaj ID v\u0259 ya pinl\u0259nmi\u015f mesaj yoxdur.\")\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n\n\n@client.on(events.NewMessage(pattern=r'\\.pin'))\nasync def pin(event):\n    try:\n        if event.is_reply:\n            msg = await event.get_reply_message()\n        else:\n            parts = event.raw_text.split()\n            if len(parts) != 2:\n                return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: reply il\u0259 .pin v\u0259 ya .pin <msg_id>\")\n            msg_id = int(parts[1])\n            msg = await client.get_messages(event.chat_id, ids=msg_id)\n\n        await client(UpdatePinnedMessageRequest(\n            peer=event.chat_id,\n            id=msg.id,\n            silent=True\n        ))\n        await event.edit(\"\ud83d\udccc Mesaj pinl\u0259ndi.\")\n\n    except ChatAdminRequiredError:\n        await event.edit(\"\u274c Botun admin h\u00fcququ yoxdur.\")\n    except MessageIdInvalidError:\n        await event.edit(\"\u274c Yanl\u0131\u015f mesaj ID v\u0259 ya mesaj art\u0131q m\u00f6vcud deyil.\")\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "# =================== EKDEDILMIS KOD: .info ===================\nfrom telethon import events\nfrom telethon.tl.functions.users import GetFullUserRequest\n\n@client.on(events.NewMessage(pattern=r'\\.info(?:\\s+(.+))?'))\nasync def info_plugin(event):\n    try:\n        # parameter: .info @user  OR .info 12345   OR .info (\u00f6z\u00fcn) OR reply + .info\n        arg = event.pattern_match.group(1) if event.pattern_match else None\n\n        # 1) Reply varsa -> reply olunan\u0131n senderi\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            if not replied:\n                return await event.edit(\"\u274c Reply mesaj\u0131 tap\u0131lmad\u0131.\")\n            target_id = replied.sender_id\n\n        # 2) Arg varsa -> id v\u0259 ya username\n        elif arg:\n            a = arg.strip()\n            if a.isdigit():\n                target_id = int(a)\n            else:\n                try:\n                    ent = await client.get_entity(a)  # @username v\u0259ya t.me/username\n                    target_id = ent.id\n                except Exception:\n                    return await event.edit(\"\u274c \u0130stifad\u0259\u00e7i tap\u0131lmad\u0131 (username/id s\u0259hv).\")\n\n        # 3) \u018fks halda -> mesaj\u0131 g\u00f6nd\u0259r\u0259nin \u00f6z\u00fc\n        else:\n            target_id = event.sender_id\n\n        # \u018fsas entity g\u00f6t\u00fcr\n        try:\n            user = await client.get_entity(target_id)\n        except Exception:\n            return await event.edit(\"\u274c \u0130stifad\u0259\u00e7i m\u0259lumatlar\u0131 al\u0131nark\u0259n s\u0259hv oldu.\")\n\n        # Tam user m\u0259lumatlar\u0131n\u0131 c\u0259hd et alma\u011fa (bio v\u0259 \u0259lav\u0259 \u00fc\u00e7\u00fcn)\n        bio = None\n        created = \"Bilinmir\"    # Telegram API ad\u0259t\u0259n yarad\u0131lma tarixini vermir\n        try:\n            full = await client(GetFullUserRequest(user.id))\n            # Telethon versiyas\u0131na g\u00f6r\u0259 bio m\u00fcxt\u0259lif yerl\u0259rd\u0259 ola bil\u0259r \u2014 bir ne\u00e7\u0259 yolda yoxla:\n            bio = getattr(full, \"about\", None)\n            if bio is None and hasattr(full, \"user\"):\n                bio = getattr(full.user, \"about\", None)\n            if bio is None:\n                # b\u0259z\u0259n full.profile v\u0259 ya full.profile.about ola bil\u0259r\n                prof = getattr(full, \"profile\", None)\n                if prof:\n                    bio = getattr(prof, \"about\", None)\n        except Exception:\n            # sad\u0259c\u0259 pass \u2014 fallback-lar istifad\u0259 edil\u0259c\u0259k\n            bio = None\n\n        # fallbacklar\n        if not bio:\n            bio = getattr(user, \"about\", None) or getattr(user, \"bio\", None) or \"He\u00e7 bir bio yoxdur\"\n\n        premium = \"Hesap \u26a1\" if getattr(user, \"premium\", False) else \"Deyil \ud83d\ude14\"\n        username = f\"@{user.username}\" if getattr(user, \"username\", None) else \"Yoxdur\"\n        first = getattr(user, \"first_name\", \"\") or \"\"\n        last = getattr(user, \"last_name\", \"\") or \"\"\n\n        out = (\n            f\"\ud83d\udc64 \u0130stifad\u0259\u00e7i M\u0259lumat\u0131\\n\\n\"\n            f\"\ud83c\udd94 ID: {user.id}\\n\"\n            f\"\ud83d\udcdb Ad: {first} {last}\\n\"\n            f\"\ud83d\udd17 Username: {username}\\n\"\n            f\"\ud83d\udcac Bio: {bio}\\n\"\n            f\"\ud83c\udf1f Premium: {premium}\\n\"\n            f\"\ud83d\udcc5 Hesab Yarad\u0131lma: {created}\"\n        )\n\n        await event.edit(out)\n\n    except Exception as e:\n        # t\u0259min ed\u0259k ki x\u0259talar istifad\u0259\u00e7iy\u0259 g\u00f6r\u00fcn\u00fcr, bot dayanm\u0131r\n        await event.edit(f\"\u274c X\u0259ta:\\n{str(e)}\")\n# =================== END OF EKDEDILMIS KOD ===================",
    "# =================== EKDEDILMIS KOD: .kick ===================\nfrom telethon import events\nfrom telethon.tl.functions.channels import EditBannedRequest\nfrom telethon.tl.types import ChatBannedRights\n\n@client.on(events.NewMessage(pattern=r'\\.kick'))\nasync def kick(event):\n    try:\n        # Yaln\u0131z \u0259mri yazan userbot \u00fc\u00e7\u00fcn i\u015fl\u0259y\u0259c\u0259k\n        if event.is_private:\n            return await event.edit(\"\u26a0\ufe0f .kick \u0259mri yaln\u0131z qrup v\u0259 kanal \u00fc\u00e7\u00fcn istifad\u0259 oluna bil\u0259r.\")\n\n        # Reply il\u0259 kick\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            user_to_kick = replied.sender_id\n\n        # Tag il\u0259 kick\n        else:\n            parts = event.raw_text.split()\n            if len(parts) < 2:\n                return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .kick @username v\u0259 ya reply il\u0259 .kick yaz\u0131n\")\n            username = parts[1]\n            try:\n                user_entity = await client.get_entity(username)\n                user_to_kick = user_entity.id\n            except Exception:\n                return await event.edit(f\"\u274c \u0130stifad\u0259\u00e7i tap\u0131lmad\u0131: {username}\")\n\n        # Kick \u0259m\u0259liyyat\u0131\n        banned_rights = ChatBannedRights(\n            until_date=None,\n            view_messages=True\n        )\n        await client(EditBannedRequest(\n            event.chat_id,\n            user_to_kick,\n            banned_rights\n        ))\n\n        await event.edit(f\"\u0130stifad\u0259\u00e7i Gurupdan At\u0131ld\u0131! \ud83e\udd77\")\n\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta: {str(e)}\")",
    "# =================== EKDEDILMIS KOD: .purge ===================\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r'\\.purge'))\nasync def purge(event):\n    try:\n        me = await client.get_me()\n        if event.sender_id != me.id:\n            return  # Dig\u0259r userbotlara t\u0259sir etm\u0259sin\n\n        deleted = 0\n\n        # Reply il\u0259 purge\n        if event.is_reply:\n            replied = await event.get_reply_message()\n            if replied:\n                start_msg_id = replied.id\n                end_msg_id = event.message.id\n                async for msg in client.iter_messages(event.chat_id, min_id=start_msg_id, max_id=end_msg_id):\n                    try:\n                        await msg.delete()\n                        deleted += 1\n                    except:\n                        pass\n                await event.respond(f\"\u2705 {deleted} mesaj silindi! \ud83d\udeae\")\n            else:\n                await event.respond(\"\u26a0\ufe0f Reply olunan mesaj tap\u0131lmad\u0131.\")\n        else:\n            # Mesaj say\u0131 il\u0259 purge\n            parts = event.raw_text.split()\n            if len(parts) != 2 or not parts[1].isdigit():\n                return await event.respond(\"\u26a0\ufe0f \u0130stifad\u0259: .purge 10 v\u0259 ya reply mesajla .purge\")\n            count = int(parts[1])\n            async for msg in client.iter_messages(event.chat_id, limit=count):\n                try:\n                    await msg.delete()\n                    deleted += 1\n                except:\n                    pass\n            await event.respond(f\"\u2705 {deleted} mesaj silindi! \ud83d\udeae\")\n\n    except Exception as e:\n        # X\u0259tan\u0131 yaln\u0131z \u0259mri yazan userbotda g\u00f6st\u0259r\n        await event.respond(f\"\u274c X\u0259ta:\\n{str(e)}\")",
    "# ================= .tag Plugin =================\nfrom telethon import events\nimport asyncio\n\n# Burada \"client\" s\u0259nin Userbot obyektindir\ntag_process = {}  # H\u0259r istifad\u0259\u00e7i \u00fc\u00e7\u00fcn ayr\u0131ca tag prosesini saxlamaq \u00fc\u00e7\u00fcn\n\n@client.on(events.NewMessage(pattern=r'\\.tag(?: (.+))?'))\nasync def tag_all(event):\n    user_id = event.sender_id\n    reason = event.pattern_match.group(1)\n    chat = await event.get_chat()\n\n    # \u018fg\u0259r ba\u015fqa tag prosesi davam edirs\u0259, x\u0259b\u0259r ver\n    if tag_process.get(user_id):\n        await event.edit(\"\u26a0\ufe0f Sizd\u0259 art\u0131q tag prosesi davam edir. Bitirm\u0259d\u0259n yeni tag ba\u015flata bilm\u0259zsiniz.\")\n        return\n\n    # Prosesi aktiv et\n    tag_process[user_id] = True\n    await event.edit(\"\ud83d\udce2 Tag prosesi ba\u015flad\u0131! \u0130stifad\u0259\u00e7il\u0259r yava\u015f-yava\u015f ta\u011f edil\u0259c\u0259k...\")\n\n    try:\n        count = 0\n        async for member in client.iter_participants(chat):\n            if not tag_process.get(user_id):\n                await event.edit(\"\u26a0\ufe0f Tag prosesi dayand\u0131r\u0131ld\u0131!\")\n                break\n\n            mention = f\"[{member.first_name}](tg://user?id={member.id})\"\n            text = mention\n            if reason:\n                text += f\" \u2013 {reason}\"\n\n            await event.respond(text)\n            count += 1\n            # Telegram limitl\u0259rin\u0259 g\u00f6r\u0259 aral\u0131\n            await asyncio.sleep(3)\n\n        if tag_process.get(user_id):\n            await event.reply(f\"\ud83e\udd77Tag prosesi tamamland\u0131! {count} istifad\u0259\u00e7i ta\u011f edildi.\")\n    except Exception as e:\n        await event.edit(f\"\u26a0\ufe0f X\u0259ta ba\u015f verdi: {str(e)}\")\n    finally:\n        tag_process[user_id] = False\n\n# Cancel kommandas\u0131\n@client.on(events.NewMessage(pattern=r'\\.cancel'))\nasync def cancel_tag(event):\n    user_id = event.sender_id\n    if tag_process.get(user_id):\n        tag_process[user_id] = False\n        await event.edit(\"\u26a0\ufe0f Tag prosesi dayand\u0131r\u0131ld\u0131.\")\n    else:\n        await event.edit(\"\u26a0\ufe0f Sizin aktiv tag prosesiniz yoxdur.\")",
    "from telethon import events\n\n@client.on(events.NewMessage(pattern=r\"\\.kickme\"))\nasync def kickme(event):\n    try:\n        user_id = event.sender_id   # \u0259mri yazan\u0131n ID-si\n        chat_id = event.chat_id     # hans\u0131 \u00e7atda yaz\u0131l\u0131b\n\n        await event.delete()  # mesaj\u0131 silirik\n        await client.kick_participant(chat_id, user_id)  # sad\u0259c\u0259 yazan istifad\u0259\u00e7ini \u00e7\u0131xard\u0131r\n    except Exception as e:\n        await event.reply(\"\u274c \u00d6z\u00fcn\u00fc \u00e7\u0131xarmaq al\u0131nmad\u0131!\")",
    "from telethon import events\nfrom telethon.tl import functions\nimport random\n\n# ---------------------- .kk Plugin ----------------------\n@client.on(events.NewMessage(pattern=r\"\\.kk(?: (.+))?\"))\nasync def add_contact(event):\n    user = event.pattern_match.group(1)\n    reply = await event.get_reply_message()\n    try:\n        # Reply varsa v\u0259 sender m\u00f6vcuddursa\n        if reply and reply.sender:\n            entity = reply.sender\n        elif user:\n            try:\n                entity = await client.get_entity(int(user))  # ID kimi yoxla\n            except:\n                try:\n                    entity = await client.get_entity(user)     # username kimi yoxla\n                except:\n                    entity = None\n        else:\n            entity = None\n\n        if not entity:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259\u00e7i tap\u0131lmad\u0131. Reply v\u0259 ya username/id istifad\u0259 edin.\")\n\n        # Tam t\u0259hl\u00fck\u0259siz first_name v\u0259 last_name\n        first_name = getattr(entity, \"first_name\", None) or \"User\"\n        last_name = getattr(entity, \"last_name\", None) or \"\"\n\n        await client(functions.contacts.AddContactRequest(\n            id=entity.id,\n            first_name=str(first_name),\n            last_name=str(last_name),\n            phone=\"\"\n        ))\n\n        fun_messages = [\n            f\"\ud83d\udc4b S\u0259ni kontakta \u0259lav\u0259 etdim, art\u0131q dostuq!\",\n            f\"\u26a1 {first_name} art\u0131q m\u0259nim kontaktdad\u0131r!\",\n            \"\ud83c\udf89 Contact \u0259lav\u0259 olundu, salamla\u015f!\"\n        ]\n        await event.edit(random.choice(fun_messages))\n\n    except Exception as e:\n        await event.edit(f\"\u274c \u018flav\u0259 edil\u0259 bilm\u0259di: {str(e)}\")\n\n# ---------------------- .kksil Plugin ----------------------\n@client.on(events.NewMessage(pattern=r\"\\.kksil(?: (.+))?\"))\nasync def del_contact(event):\n    user = event.pattern_match.group(1)\n    reply = await event.get_reply_message()\n    try:\n        if reply and reply.sender:\n            entity = reply.sender\n        elif user:\n            try:\n                entity = await client.get_entity(int(user))  # ID kimi yoxla\n            except:\n                try:\n                    entity = await client.get_entity(user)     # username kimi yoxla\n                except:\n                    entity = None\n        else:\n            entity = None\n\n        if not entity:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259\u00e7i tap\u0131lmad\u0131. Reply v\u0259 ya username/id istifad\u0259 edin.\")\n\n        await client(functions.contacts.DeleteContactsRequest(id=[entity.id]))\n\n        first_name = getattr(entity, \"first_name\", None) or \"User\"\n\n        fun_messages = [\n            f\"\ud83d\uddd1\ufe0f S\u0259ni kontaktdan sildim, bye!\",\n            f\"\u26d4 {first_name} art\u0131q kontaktda deyil!\",\n            \"\ud83d\udc94 Contact silindi, indi \u00f6z yoluna baxs\u0131n!\"\n        ]\n        await event.edit(random.choice(fun_messages))\n\n    except Exception as e:\n        await event.edit(f\"\u274c Silin\u0259 bilm\u0259di: {str(e)}\")",
    "import asyncio\nimport random\nfrom telethon import events, errors\n\n@client.on(events.NewMessage(pattern=r'^\\.yd(?: (.*))?'))\nasync def yd_checker(event):\n    try:\n        reply = await event.get_reply_message()\n        target = reply.sender if reply and reply.sender else await event.get_sender()\n        first_name = getattr(target, \"first_name\", None) or \"User\"\n\n        await event.edit(f\"\ud83c\udfaf {first_name}, s\u00f6zl\u0259rin\u0259 inanmal\u0131yam yoxsa yox? \ud83e\udd14\")\n        await asyncio.sleep(0.5)\n        await event.edit(\"\ud83d\udd2c Ara\u015fd\u0131r\u0131r\u0131q... G\u00f6zl\u0259yin biraz\")\n        await asyncio.sleep(1)\n        await event.edit(\"\ud83d\udd0e T\u0259hlil edilir...\")\n        await asyncio.sleep(0.5)\n\n        # Random yalan/do\u011fru loop\n        for _ in range(15):\n            verdict = random.choice([\"Yalan deyirs\u0259n\u274c\", \"Do\u011fru deyirs\u0259n\u2705\"])\n            try:\n                await event.edit(f\"\ud83d\udd0d {first_name}: {verdict}\")\n            except errors.MessageNotModifiedError:\n                pass  # eyni text il\u0259 edit ed\u0259rk\u0259n x\u0259ta verm\u0259sin\n            await asyncio.sleep(0.3)\n\n        final_verdict = random.choice([\"\u274c S\u00f6zl\u0259rin\u0259 inanm\u0131ram!\", \"\u2705 S\u00f6zl\u0259rin do\u011fru g\u00f6r\u00fcn\u00fcr!\"])\n        percentage = random.randint(0, 100)\n        await event.edit(f\"\ud83d\udca1 {first_name}, {final_verdict}\\n\\n\ud83d\udcaf Uy\u011funluq: %{percentage}\")\n\n    except Exception:\n        await event.edit(\"\u26a0\ufe0f X\u0259ta ba\u015f verdi, amma bot i\u015fl\u0259m\u0259y\u0259 davam edir.\")",
    "import asyncio\nfrom telethon import events\nfrom telethon.errors import rpcbaseerrors\n\n# =================== .dela PLUGIN ===================\n@client.on(events.NewMessage(pattern=r'^\\.dela$'))\nasync def delete_my_messages(event):\n    try:\n        chat = event.chat_id\n        sender = await event.get_sender()\n        user_id = sender.id  # H\u0259r istifad\u0259\u00e7i \u00fc\u00e7\u00fcn ayr\u0131ca id\n\n        count = 0\n        # Chatdak\u0131 yaln\u0131z h\u0259min istifad\u0259\u00e7inin mesajlar\u0131n\u0131 sil\n        async for message in client.iter_messages(chat, from_user=user_id):\n            try:\n                await message.delete()\n                count += 1\n            except rpcbaseerrors.BadRequestError:\n                continue\n\n        # \u0130stifad\u0259\u00e7iy\u0259 edit mesaj il\u0259 bildiri\u015f\n        info_msg = await event.respond(f\"\ud83d\uddd1 {count} mesaj\u0131n\u0131z silindi!\")\n        await asyncio.sleep(2)\n        await info_msg.delete()\n\n    except Exception:\n        # X\u0259ta olsa da bot dayanm\u0131r\n        await event.respond(\"\u26a0\ufe0f Mesajlar silin\u0259rk\u0259n x\u0259ta ba\u015f verdi, amma bot i\u015fl\u0259m\u0259y\u0259 davam edir.\")",
    "# ===========================\n# .cevir Plugin - Reply il\u0259 i\u015fl\u0259yir v\u0259 bo\u015f yoxlay\u0131r\n# ===========================\nfrom telethon import events\nfrom googletrans import Translator\n\ntranslator = Translator()\n\n@client.on(events.NewMessage(pattern=r\"\\.cevir(?:\\s+(\\w{2}))?\"))\nasync def cevir(event):\n    args = event.raw_text.split(\" \", 1)\n\n    # He\u00e7 dil kodu yaz\u0131lmay\u0131bsa x\u0259b\u0259rdarl\u0131q\n    if len(args) == 1:\n        return await event.edit(\n            \"\u26a0\ufe0f \u0130stifad\u0259: .cevir <dil_kodu>\\nM\u0259s\u0259l\u0259n: .cevir az\"\n        )\n\n    target_lang = args[1].lower()\n\n    # Reply yoxdursa x\u0259b\u0259rdarl\u0131q\n    if not event.is_reply:\n        return await event.edit(\n            \"\u26a0\ufe0f T\u0259rc\u00fcm\u0259 \u00fc\u00e7\u00fcn mesaj \u00fcz\u0259rin\u0259 reply edin.\\n\u0130stifad\u0259: .cevir <dil_kodu>\"\n        )\n\n    replied = await event.get_reply_message()\n    text_to_translate = replied.text or replied.message\n\n    if not text_to_translate:\n        return await event.edit(\"\u26a0\ufe0f Reply etdiyiniz mesaj bo\u015fdur, t\u0259rc\u00fcm\u0259 edil\u0259 bilmir.\")\n\n    try:\n        translated = translator.translate(text_to_translate, dest=target_lang)\n        await event.edit(f\"\ud83c\udf10 T\u0259rc\u00fcm\u0259 ({translated.src} \u2192 {target_lang}):\\n\\n{translated.text}\")\n    except Exception as e:\n        await event.edit(f\"\u274c X\u0259ta: {str(e)}\")",
    "from telethon import events\nimport random\n\n# Kiss kommand\u0131 (azd\u0131r\u0131c\u0131, 15 random mesaj)\n@client.on(events.NewMessage(pattern=r'\\.kiss(?:\\s+@(\\w+))?'))\nasync def kiss(event):\n    if not event.is_reply and not event.pattern_match.group(1):\n        return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .kiss @username v\u0259 ya reply mesajla\")\n    \n    if event.is_reply:\n        reply_msg = await event.get_reply_message()\n        target = f\"[{reply_msg.sender.first_name}](tg://user?id={reply_msg.sender_id})\"\n    else:\n        target_username = event.pattern_match.group(1)\n        target = f\"@{target_username}\"\n    \n    kiss_texts = [\n        f\"{event.sender.first_name} \ud83d\udc8b {target}-\u0259 y\u00fcng\u00fcl bir \u00f6p\u00fcc\u00fck atd\u0131 \ud83d\ude18\ud83d\udc96\",\n        f\"\ud83e\udd70 {event.sender.first_name} {target}-i \u00f6pd\u00fc, yana\u011f\u0131na toxundu \ud83d\ude1a\u2728\",\n        f\"\ud83d\udc9e {event.sender.first_name} romantik \u00f6p\u00fcc\u00fckl\u0259 {target}-i \u0259yl\u0259ndirdi \ud83d\ude3d\ud83d\udc93\",\n        f\"\ud83d\ude18 {event.sender.first_name} \u27a1 {target}, \u015firin bir \u00f6p\u00fcc\u00fck g\u00f6nd\u0259rdi \ud83d\udc96\ud83c\udf39\",\n        f\"{event.sender.first_name} \ud83d\ude18 {target}-in dodaqlar\u0131na nazik bir \u00f6p\u00fcc\u00fck verdi \ud83d\udc95\u2728\",\n        f\"\ud83d\udc8b\ud83d\udc96 {event.sender.first_name} {target}-i qucaqlayaraq \u00f6pd\u00fc \ud83d\ude1a\",\n        f\"\ud83d\udc8c {event.sender.first_name} nazik \u00f6p\u00fcc\u00fckl\u0259rl\u0259 {target}-i sevindirdi \ud83d\ude18\",\n        f\"\ud83e\udd7a {event.sender.first_name} {target}-i \u00f6p\u00fcb yana\u011f\u0131n\u0131 \u0259zdi \ud83d\ude33\ud83d\udc9e\",\n        f\"\ud83d\udc96 {event.sender.first_name} {target}-\u0259 fl\u00f6rtik \u00f6p\u00fcc\u00fck g\u00f6nd\u0259rdi \ud83d\ude0f\u2728\",\n        f\"\ud83d\udc8b {event.sender.first_name} y\u00fcng\u00fclc\u0259 {target}-i \u00f6pd\u00fc v\u0259 \u0259ll\u0259rini s\u0131xd\u0131 \ud83d\ude18\ud83d\udcab\",\n        f\"\ud83d\udc9e {event.sender.first_name} {target}-i romantik \u00f6p\u00fcc\u00fck il\u0259 \u015firinl\u0259\u015fdirdi \ud83d\ude3d\",\n        f\"\ud83d\ude18 {event.sender.first_name} {target}-\u0259 s\u00fcrpriz bir \u00f6p\u00fcc\u00fck etdi \ud83d\udc96\ud83d\udc8b\",\n        f\"\ud83d\udc8c {event.sender.first_name} {target}-in dodaqlar\u0131na \u0259yl\u0259nc\u0259li \u00f6p\u00fcc\u00fck verdi \ud83d\ude1a\u2728\",\n        f\"\ud83d\udc93 {event.sender.first_name} {target}-i qucaqlay\u0131b \u00f6pd\u00fc v\u0259 g\u00fcl\u00fcms\u0259di \ud83d\ude18\",\n        f\"\ud83d\udc8b {event.sender.first_name} {target}-\u0259 fl\u00f6rtik \u00f6p\u00fcc\u00fck g\u00f6nd\u0259r\u0259r\u0259k t\u0259\u0259cc\u00fcbl\u0259ndirdi \ud83d\ude0f\ud83d\udc9e\"\n    ]\n    await event.edit(random.choice(kiss_texts))\n\n# Slap kommand\u0131 (15 random mesaj)\n@client.on(events.NewMessage(pattern=r'\\.slap(?:\\s+@(\\w+))?'))\nasync def slap(event):\n    if not event.is_reply and not event.pattern_match.group(1):\n        return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .slap @username v\u0259 ya reply mesajla\")\n    \n    if event.is_reply:\n        reply_msg = await event.get_reply_message()\n        target = f\"[{reply_msg.sender.first_name}](tg://user?id={reply_msg.sender_id})\"\n    else:\n        target_username = event.pattern_match.group(1)\n        target = f\"@{target_username}\"\n    \n    slap_texts = [\n        f\"{event.sender.first_name} \ud83d\udc4a {target}-\u0259 slap vurdu \ud83e\udd23\ud83d\udca5\",\n        f\"\ud83d\udca2 {event.sender.first_name} \u27a1 {target}-i zarafatla slap etdi \ud83d\ude06\u2728\",\n        f\"{event.sender.first_name} \ud83d\ude0e slap! {target} geri \u00e7\u0259kildi \ud83d\ude02\ud83d\udd25\",\n        f\"\u26a1 {event.sender.first_name} {target}-i slap etdi \ud83d\ude04\ud83d\udca5\",\n        f\"{event.sender.first_name} \ud83e\udd1c {target}-\u0259 s\u00fcrpriz slap vurdu \ud83d\ude0f\ud83d\udcab\",\n        f\"\ud83e\udd23 {event.sender.first_name} slap! {target} g\u00f6zl\u0259rini q\u0131rpd\u0131 \ud83d\ude02\",\n        f\"\ud83d\udc4a {event.sender.first_name} {target}-i zarafatla slap etdi \ud83d\ude06\ud83d\udca5\",\n        f\"\ud83d\udca5 {event.sender.first_name} slap vurdu, {target} \u00e7a\u015fd\u0131 \ud83d\ude04\ud83d\udd25\",\n        f\"\ud83d\ude0e {event.sender.first_name} s\u00fcrpriz slap il\u0259 {target}-i vurdu \ud83e\udd23\u2728\",\n        f\"\ud83e\udd1c {event.sender.first_name} {target}-\u0259 g\u00fccl\u00fc slap etdi \ud83d\udca2\ud83d\udd25\",\n        f\"\ud83e\udd23 {event.sender.first_name} {target}-i slap il\u0259 \u0259yl\u0259ndirdi \ud83d\ude06\ud83d\udca5\",\n        f\"\u26a1 {event.sender.first_name} slap vurdu, {target} t\u0259\u0259cc\u00fcbl\u0259ndi \ud83d\ude04\",\n        f\"\ud83d\udc4a {event.sender.first_name} {target}-\u0259 slap atd\u0131 v\u0259 zarafat etdi \ud83d\ude0f\",\n        f\"\ud83d\udca5 {event.sender.first_name} {target}-i slap il\u0259 qorxutdu \ud83d\ude04\ud83d\udcab\",\n        f\"\ud83e\udd23 {event.sender.first_name} {target}-i slap ed\u0259r\u0259k g\u00fcld\u00fcrd\u00fc \ud83d\ude02\ud83d\udca2\"\n    ]\n    await event.edit(random.choice(slap_texts))",
    "# -*- coding: utf-8 -*-\nimport random\nfrom telethon import events\n\n# DVJ Plugin - RP il\u0259 q\u0131zlar\u0131 c\u0259lb ed\u0259n mesajlar\n@client.on(events.NewMessage(pattern=r'\\.dvj'))\nasync def dvj(event):\n    # Reply varsa, target reply mesaj\u0131n\u0131n g\u00f6nd\u0259r\u0259ni olacaq\n    if event.is_reply:\n        target = await event.get_reply_message()\n        user = await target.get_sender()\n    else:\n        # \u018fg\u0259r reply yoxdursa kommandan\u0131 yazan\u0131 g\u00f6st\u0259r\n        user = await event.get_sender()\n\n    mention = f\"[{user.first_name}](tg://user?id={user.id})\"\n\n    msgs = [\n        f\"{mention}, s\u0259nin g\u00fcl\u00fc\u015f\u00fcn g\u00fcn\u00fcm\u00fc i\u015f\u0131qland\u0131r\u0131r \ud83c\udf38\",\n        f\"{mention}, s\u0259ni g\u00f6rd\u00fckc\u0259 \u00fcr\u0259yim d\u00f6y\u00fcn\u00fcr \ud83d\udc93\",\n        f\"{mention}, s\u0259sin qulaqlar\u0131mda \u0259ks-s\u0259da verir \ud83c\udfb6\",\n        f\"{mention}, s\u0259nin yan\u0131nda d\u00fcnya daha g\u00f6z\u0259l g\u00f6r\u00fcn\u00fcr \ud83c\udf37\",\n        f\"{mention}, \u00fcr\u0259yim s\u0259ninl\u0259 doludur \ud83d\udc8c\",\n        f\"{mention}, bax\u0131\u015flar\u0131n m\u0259ni hipnoz edir \u2728\",\n        f\"{mention}, s\u0259ninl\u0259 dan\u0131\u015fmaq h\u0259r zaman xo\u015fdur \ud83d\ude07\",\n        f\"{mention}, s\u0259nin zarafatlar\u0131n m\u0259ni g\u00fcld\u00fcr\u00fcr \ud83d\ude02\",\n        f\"{mention}, g\u00f6zl\u0259rin ulduzlar kimi par\u0131lday\u0131r \ud83c\udf1f\",\n        f\"{mention}, s\u0259ninl\u0259 h\u0259r an\u0131 payla\u015fmaq ist\u0259yir\u0259m \ud83e\udd70\",\n        f\"{mention}, h\u0259r s\u00f6hb\u0259timiz m\u0259nim \u00fc\u00e7\u00fcn \u0259v\u0259zolunmazd\u0131r \ud83d\udc95\",\n        f\"{mention}, s\u0259nin yax\u0131nl\u0131\u011f\u0131nda olmaq m\u0259n\u0259 rahatl\u0131q verir \ud83c\udf39\",\n        f\"{mention}, s\u0259ninl\u0259 vaxt ke\u00e7irm\u0259k \u0259n b\u00f6y\u00fck z\u00f6vqd\u00fcr \u23f3\",\n        f\"{mention}, s\u0259ni d\u00fc\u015f\u00fcnd\u00fckc\u0259 \u00fcz\u00fcm g\u00fcl\u00fcr \ud83d\ude0d\",\n        f\"{mention}, s\u0259nin s\u0259s tonun m\u0259ni sakitl\u0259\u015fdirir \ud83c\udfb5\",\n        f\"{mention}, s\u0259n\u0259 baxmaq \u00fcr\u0259yimi isindir \u2600\ufe0f\",\n        f\"{mention}, h\u0259r an s\u0259nin yan\u0131nda olmaq ist\u0259yir\u0259m \ud83d\udc96\",\n        f\"{mention}, s\u0259nin yan\u0131nda olmaq m\u0259nim \u00fc\u00e7\u00fcn xo\u015fb\u0259xtlikdir \ud83c\udf3a\",\n        f\"{mention}, s\u0259nin zarafatlar\u0131n m\u0259n\u0259 enerji verir \u26a1\",\n        f\"{mention}, s\u0259ni g\u00f6rm\u0259k g\u00fcn\u00fcm\u00fc tamamlay\u0131r \ud83c\udf08\",\n        f\"{mention}, bax\u0131\u015flar\u0131n m\u0259nim ruhumu ox\u015fay\u0131r \ud83d\udd4a\ufe0f\",\n        f\"{mention}, s\u0259ninl\u0259 dan\u0131\u015fmaq h\u0259r zaman maraql\u0131d\u0131r \ud83d\udde8\ufe0f\",\n        f\"{mention}, s\u0259ninl\u0259 h\u0259r an \u0259yl\u0259nc\u0259lidir \ud83c\udf89\",\n        f\"{mention}, s\u0259nin yan\u0131nda olmaq m\u0259n\u0259 ilham verir \ud83d\udca1\",\n        f\"{mention}, s\u0259ninl\u0259 s\u00f6hb\u0259t etm\u0259k rahatl\u0131qd\u0131r \ud83c\udf38\",\n        f\"{mention}, s\u0259nin g\u00fcl\u00fc\u015f\u00fcn m\u0259n\u0259 enerji verir \ud83c\udf1e\",\n        f\"{mention}, s\u0259ninl\u0259 olmaq m\u0259nim \u00fc\u00e7\u00fcn \u015fansd\u0131r \ud83c\udf40\",\n        f\"{mention}, s\u0259nin g\u00f6z\u0259lliyin m\u0259ni valeh edir \ud83d\ude18\",\n        f\"{mention}, s\u0259nin s\u0259mimiyy\u0259tin m\u0259ni c\u0259lb edir \ud83d\udc97\",\n        f\"{mention}, s\u0259nin yan\u0131nda h\u0259r \u015fey daha maraql\u0131d\u0131r \ud83c\udf88\",\n        f\"{mention}, s\u0259n m\u0259nim \u00fc\u00e7\u00fcn x\u00fcsusi bir insansan \ud83c\udf39\",\n        f\"{mention}, s\u0259nin s\u00f6zl\u0259rin m\u0259nim \u00fc\u00e7\u00fcn qiym\u0259tlidir \ud83d\udcdd\",\n        f\"{mention}, s\u0259ninl\u0259 s\u00f6hb\u0259t etm\u0259k h\u0259mi\u015f\u0259 xo\u015fdur \ud83d\ude0a\",\n        f\"{mention}, s\u0259nin g\u00fcl\u00fc\u015f\u00fcn m\u0259ni xo\u015fb\u0259xt edir \ud83c\udf1f\",\n        f\"{mention}, s\u0259nin yan\u0131nda olmaq m\u0259nim \u00fc\u00e7\u00fcn rahatl\u0131qd\u0131r \ud83d\udecb\ufe0f\",\n        f\"{mention}, s\u0259ninl\u0259 vaxt ke\u00e7irm\u0259k m\u0259nim \u00fc\u00e7\u00fcn d\u0259y\u0259rlidir \u23f3\",\n        f\"{mention}, s\u0259ninl\u0259 dan\u0131\u015fmaq \u00fcr\u0259yimi isindir \ud83d\udc96\",\n        f\"{mention}, s\u0259ninl\u0259 h\u0259r an maraql\u0131d\u0131r \u2728\",\n        f\"{mention}, s\u0259nin yan\u0131nda olmaq m\u0259n\u0259 huzur verir \ud83d\udd4a\ufe0f\",\n        f\"{mention}, s\u0259nin bax\u0131\u015flar\u0131n m\u0259ni valeh edir \ud83d\udc40\",\n        f\"{mention}, s\u0259nin zarafatlar\u0131n g\u00fcn\u00fcm\u00fc i\u015f\u0131qland\u0131r\u0131r \ud83d\ude02\",\n        f\"{mention}, s\u0259nin yan\u0131nda olmaq m\u0259nim \u00fc\u00e7\u00fcn x\u00fcsusi anlar yarad\u0131r \ud83c\udf3a\",\n        f\"{mention}, s\u0259ninl\u0259 s\u00f6hb\u0259t etm\u0259k m\u0259n\u0259 xo\u015fb\u0259xtlik g\u0259tirir \ud83d\udc8c\"\n    ]\n\n    selected_msg = random.choice(msgs)\n    await event.edit(selected_msg)",
    "from asyncio import sleep\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r\"^\\.glspam$\"))\nasync def glspam(event):\n   \n    chat = \"@spambot\"\n\n    await event.edit(\"Global Spam a\u00e7\u0131l\u0131r, g\u00f6zl\u0259yin...\")\n\n    try:\n        async with event.client.conversation(chat) as conv:\n            await conv.send_message(\"/start\")\n            await conv.get_response()\n\n            await conv.send_message(\"This is a mistake\")\n            await conv.get_response()\n\n            await conv.send_message(\"Yes\")\n            await conv.get_response()\n\n            await conv.send_message(\"No! Never did that!\")\n            await conv.get_response()\n\n            await conv.send_message(\n                \"Someone reported me but I did not do anything wrong. \"\n                \"Please review and remove my global spam limit.\"\n            )\n            await conv.get_response()\n\n            await conv.send_message(\"Cool, thanks\")\n            await conv.get_response()\n\n        await sleep(4)\n        await event.respond(\n            \"\u26a1 Global Spamdan \u00c7\u0131xard\u0131ld\u0131\\n\"\n            \"\u23f3 Minumum 1 Saat \u018frzind\u0259 Spamdan \u00c7\u0131xar\u0131lacaq Hesap!\"\n        )\n        await event.delete()\n\n    except Exception as e:\n        await event.edit(f\"\u26a0\ufe0f X\u0259ta ba\u015f verdi: {e}\")",
    "# -*- coding: utf-8 -*-\nimport random\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r'\\.love'))\nasync def love(event):\n    if not event.is_reply:\n        return await event.edit(\"\ud83d\udc8c Birin\u0259 reply et ki, s\u0259nl\u0259 n\u0259 q\u0259d\u0259r uy\u011fun oldu\u011funu deyim \ud83d\ude09\")\n    user = await event.get_reply_message()\n    percent = random.randint(0, 100)\n\n    msgs = [\n        f\"\ud83d\udc98 S\u0259n v\u0259 {user.sender.first_name} aras\u0131nda {percent}% uy\u011funluq var \ud83d\udd25\",\n        f\"\ud83d\udc95 Q\u0259lbin {percent}% d\u0259r\u0259c\u0259 {user.sender.first_name} il\u0259 eyni ritmd\u0259 d\u00f6y\u00fcn\u00fcr \ud83d\udc93\",\n        f\"\ud83d\ude0d {user.sender.first_name} il\u0259 sevgi enerjiniz {percent}% \ud83d\udc9e\",\n        f\"\u2764\ufe0f Siz ikiniz {percent}% uy\u011fun c\u00fctl\u00fck ola bil\u0259rsiniz \ud83c\udf39\",\n        f\"\u2728 Sevgid\u0259 uy\u011funluq: {percent}% \u2014 b\u0259lk\u0259 d\u0259 tale sizi birl\u0259\u015fdirir \ud83d\ude09\"\n    ]\n\n    await event.edit(random.choice(msgs))",
    "# -*- coding: utf-8 -*-\nimport random\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r'\\.iq'))\nasync def iq(event):\n    iq_score = random.randint(50, 160)\n\n    msgs = [\n        f\"\ud83e\udde0 S\u0259nin IQ s\u0259viyy\u0259n: {iq_score}\\nHmm... maraql\u0131 n\u0259tic\u0259 \ud83e\udd14\",\n        f\"\ud83d\udcca Test n\u0259tic\u0259si: {iq_score} IQ!\\nZ\u0259ka il\u0259 \u015firinliyi qar\u0131\u015fd\u0131rm\u0131san \ud83d\ude05\",\n        f\"\ud83d\udca1 {iq_score} IQ s\u0259ni \u00e7ox a\u011f\u0131ll\u0131 g\u00f6st\u0259rir, amma bir az romantika da laz\u0131m \u2764\ufe0f\",\n        f\"\ud83d\udd2e Z\u0259ka d\u0259r\u0259c\u0259n: {iq_score}\\nBeynin i\u015fl\u0259yir, amma \u00fcr\u0259yin daha s\u00fcr\u0259tli d\u00f6y\u00fcn\u00fcr \ud83d\ude0c\",\n        f\"\u26a1 IQ n\u0259tic\u0259n: {iq_score}\\n\u018fsl\u0259n a\u011f\u0131ll\u0131san, amma bir az d\u0259li ruh da var \ud83e\udd2a\"\n    ]\n\n    await event.edit(random.choice(msgs))",
    "# -*- coding: utf-8 -*-\nimport random\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r'\\.eng'))\nasync def energy(event):\n    energy = random.randint(0, 100)\n\n    msgs = [\n        f\"\u26a1 Enerji s\u0259viyy\u0259n: {energy}%\\nBug\u00fcn tam g\u00fccd\u0259s\u0259n! \ud83d\udcaa\",\n        f\"\ud83d\udd0b Hal-haz\u0131rda enerjin {energy}%\\nBir az q\u0259hv\u0259 i\u00e7, daha da artar \u2615\",\n        f\"\ud83d\udd25 S\u0259nd\u0259 {energy}% enerji var \u2014 partlama\u011fa haz\u0131rsan \ud83d\ude0e\",\n        f\"\ud83c\udf19 Enerji s\u0259viyy\u0259n: {energy}%\\nDaha \u00e7ox yatmaq laz\u0131m ola bil\u0259r \ud83d\ude34\",\n        f\"\u2728 Enerjin {energy}%\\nYax\u015f\u0131 ki, h\u0259l\u0259 d\u0259 g\u00fcl\u00fc\u015f\u00fcn\u00fc saxlaya bilirs\u0259n \ud83d\ude0d\"\n    ]\n\n    await event.edit(random.choice(msgs))",
    "import asyncio\nimport random\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r'\\.blok'))\nasync def blok_command(event):\n    if event.fwd_from:\n        return\n\n    # \u0130lkin mesaj\n    await event.edit(\"\u0130stifad\u0259\u00e7i Bloklan\u0131r... \")\n    await asyncio.sleep(1.5)\n\n    # Animation interval\n    animation_interval = 1\n\n    # Djvjenya + flirt \u00fcslubunda mesajlar\n    base_messages = [\n        \"H\u0259\u0259\u2026 bu q\u0131z \u00e7ox g\u00f6z\u0259ldi ax\u0131 nec\u0259, bloklama\u011fa c\u0259hd etdim onu m\u0259n\",\n        \"Oops! S\u0259n dem\u0259, \u00fcr\u0259yin art\u0131q m\u0259nimdiii\",\n        \"\u00dczg\u00fcn\u0259m, bu g\u00f6z\u0259\u0259liyi bloklamaq m\u00fcmk\u00fcn deyil, g\u00f6zl\u0259ri \u00e7ox c\u0259lbedicidiiiii\",\n        \"S\u0259ni x\u0259b\u0259rdar edir\u0259m\u2026 \u015f\u0259k\u0259r x\u0259st\u0259siy\u0259m bu q\u0259d\u0259r \u015firin olma!\"\n        \n    ]\n\n    wink_emojis = [\"\ud83d\ude09\", \"\ud83d\ude1c\", \"\ud83d\ude1a\", \"\ud83d\ude0d\", \"\ud83d\ude0f\"]\n    sparkle_emojis = [\"\u2728\", \"\ud83d\udcab\", \"\ud83c\udf1f\", \"\u2b50\"]\n    hearts = [\"\ud83d\udc96\", \"\ud83d\udc98\", \"\ud83d\udc9d\", \"\u2764\ufe0f\"]\n\n    # H\u0259r mesaj\u0131 ard\u0131c\u0131l s\u00fcr\u00fc\u015fm\u0259 effekti il\u0259 edit et\n    for msg in base_messages:\n        for _ in range(5):  # 3 d\u0259f\u0259 f\u0259rqli kombinasiya il\u0259 g\u00f6st\u0259r\n            msg_with_effect = f\"{msg} {random.choice(wink_emojis)} {random.choice(sparkle_emojis)} {random.choice(hearts)}\"\n            await asyncio.sleep(animation_interval)\n            await event.edit(msg_with_effect)\n\n    # Son bonus mesaj\n    bonus_messages = [\n        \"\ud83d\udc8c H\u0259r \u015fey bitdi, amma g\u00f6zl\u0259rin h\u0259l\u0259 d\u0259 m\u0259nim a\u011fl\u0131mdad\u0131 \ud83d\ude0f\u2764\ufe0f\",\n        \"\ud83d\ude0d S\u0259nl\u0259 oyun ba\u015fa \u00e7atd\u0131, amma \u00fcr\u0259yim h\u0259l\u0259 d\u0259 s\u0259ni ist\u0259yir \ud83d\ude0d\ud83d\udc96\",\n        \"Bu d\u0259f\u0259 bloklanmad\u0131n, bel\u0259 bir g\u00f6z\u0259lliyi nec\u0259 bloka atma\u011f m\u00fcmk\u00fcnd\u00fcr \ud83d\ude09\ud83d\udcab\"\n    ]\n    await asyncio.sleep(animation_interval)\n    await event.edit(random.choice(bonus_messages))",
    "import asyncio\nfrom telethon import events\nfrom telethon.tl.types import DocumentAttributeSticker, InputStickerSetShortName\nfrom io import BytesIO\nfrom PIL import Image, ImageDraw, ImageFont\nimport requests\nimport textwrap\n\nIOS_EMOJI_BASE = \"https://raw.githubusercontent.com/iamcal/emoji-data/master/img-apple-64/\"\n\ndef emoji_to_url(c):\n    return \"-\".join(f\"{ord(ch):x}\" for ch in c)\n\nasync def draw_text(draw, text, font, img):\n    # M\u0259tn s\u0259tirl\u0259r\u0259 b\u00f6l\u00fcns\u00fcn\n    max_chars_per_line = 12\n    lines = []\n    for paragraph in text.splitlines():\n        wrapped = textwrap.wrap(paragraph, width=max_chars_per_line)\n        lines.extend(wrapped if wrapped else [\"\"])\n\n    # Line height eyni: font + padding\n    bbox = draw.textbbox((0,0), \"Ay\", font=font)\n    line_height = bbox[3] - bbox[1] + 5\n\n    # Sticker m\u0259rk\u0259zl\u0259\u015fdirilmi\u015f\n    total_height = line_height * len(lines)\n    y_offset = (img.size[1] - total_height)//2\n\n    for line in lines:\n        # X m\u0259rk\u0259zl\u0259\u015fdirilmi\u015f\n        bbox_line = draw.textbbox((0,0), line, font=font)\n        line_width = bbox_line[2] - bbox_line[0]\n        x_offset = (img.size[0] - line_width)//2\n\n        i = 0\n        while i < len(line):\n            ch = line[i]\n            if ord(ch) > 10000:  # emoji\n                try:\n                    url = IOS_EMOJI_BASE + emoji_to_url(ch) + \".png\"\n                    resp = requests.get(url, stream=True)\n                    e_img = Image.open(resp.raw).convert(\"RGBA\").resize((line_height,line_height))\n                    img.paste(e_img, (x_offset, y_offset), e_img)\n                    x_offset += line_height\n                except:\n                    bbox_ch = draw.textbbox((0,0), ch, font=font)\n                    w = bbox_ch[2]-bbox_ch[0]\n                    draw.text((x_offset, y_offset), ch, font=font, fill=\"black\")\n                    x_offset += w\n            else:\n                bbox_ch = draw.textbbox((0,0), ch, font=font)\n                w = bbox_ch[2]-bbox_ch[0]\n                draw.text((x_offset, y_offset), ch, font=font, fill=\"black\")\n                x_offset += w\n            i += 1\n        y_offset += line_height\n\n@client.on(events.NewMessage(pattern=r'^\\.stic'))\nasync def stic_plugin(event):\n    try:\n        if not event.is_reply:\n            return await event.edit(\"Reply edilmi\u015f mesaj\u0131 se\u00e7in v\u0259 sonra .stic yaz\u0131n.\")\n\n        reply = await event.get_reply_message()\n        text = reply.message or \"Ryhaven Sticker\"\n        reply_to_id = reply.id\n        sender = await event.get_sender()\n        user_id = sender.id\n\n        await event.edit(\"Sticker haz\u0131rlan\u0131r...\")\n\n        img_size = 512\n        img = Image.new(\"RGBA\", (img_size, img_size), color=(255,255,255,255))\n        draw = ImageDraw.Draw(img)\n\n        try:\n            font = ImageFont.truetype(\"arial.ttf\", 48)\n        except:\n            font = ImageFont.load_default()\n\n        await draw_text(draw, text, font, img)\n\n        bio = BytesIO()\n        img.save(bio, \"WEBP\")\n        bio.name = \"sticker.webp\"\n        bio.seek(0)\n\n        stickerset_name = f\"ryhaven_userbot_{user_id}_by_{user_id}\"\n\n        await client.send_file(\n            event.chat_id,\n            file=bio,\n            force_document=False,\n            attributes=[DocumentAttributeSticker(\n                alt=text[:64],\n                stickerset=InputStickerSetShortName(short_name=stickerset_name)\n            )],\n            reply_to=reply_to_id\n        )\n\n        await event.delete()\n        bio.close()\n        del bio\n        del img\n        del draw\n\n    except Exception:\n        await event.edit(\"X\u0259ta ba\u015f verdi, bot i\u015fl\u0259m\u0259y\u0259 davam edir.\")",
    "import asyncio\nimport re\nimport io\nimport traceback\nfrom telethon import events\n\n@client.on(events.NewMessage(pattern=r'\\.song(?: (.+))?'))\nasync def ytsong(event):\n    query = event.pattern_match.group(1)\n    chat_id = event.chat_id\n    if not query:\n        return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .song Mahn\u0131 ad\u0131\")\n\n    msg = await event.edit(\"\ud83c\udfb5 Mahn\u0131 axtar\u0131l\u0131r...\")\n    try:\n        # Botu i\u015f\u0259 sal\n        await client.send_message(\"@SongFastBot\", \"/start\")\n        await asyncio.sleep(2)\n\n        # Mahn\u0131n\u0131 axtar\n        await msg.edit(\"\ud83c\udfb5 Mahn\u0131 Y\u00fckl\u0259nir...\")\n        await client.send_message(\"@SongFastBot\", query)\n        await asyncio.sleep(3)\n\n        # Inline d\u00fcym\u0259ni klikl\u0259\n        async for message in client.iter_messages(\"@SongFastBot\", limit=5):\n            if message.buttons:\n                await message.click(0)\n                break\n        await asyncio.sleep(4)  # cavab\u0131n g\u0259lm\u0259si \u00fc\u00e7\u00fcn g\u00f6zl\u0259m\u0259\n\n        # Media mesajlar\u0131n\u0131 y\u0131\u011f\n        media_messages = []\n        async for message in client.iter_messages(\"@SongFastBot\", limit=5):\n            if message.audio or message.document or message.video:\n                media_messages.append(message)\n\n        if not media_messages:\n            await msg.edit(\"\u26a0\ufe0f Mahn\u0131 tap\u0131lmad\u0131!\")\n            return\n\n        # Fayllar\u0131 RAM-dan g\u00f6nd\u0259r v\u0259 sonra sil\n        for i, audio_message in enumerate(media_messages, 1):\n            safe_name = re.sub(r'[\\\\/*?:\"<>|]', \"\", query)\n\n            bio = io.BytesIO()\n            bio.name = f\"{safe_name}_{i}.mp3\"\n            await audio_message.download_media(file=bio)\n            bio.seek(0)\n\n            # Qrafik al\u0131nt\u0131 formatl\u0131 caption\n            caption = (\n                f\"\u256d\u2500 \ud83c\udfb6 {query}\\n\"\n                f\"\u2570\u2500 [\ud835\ude81\ud835\ude88\ud835\ude77\ud835\ude70\ud835\ude85\u03a3\ud835\ude7d \ud835\ude84\ud835\ude82\u03a3\ud835\ude81\ud835\ude71\ud835\ude7e\ud835\ude83 \ud83e\udd77](https://t.me/RyhavenUserbot)\"\n            )\n\n            await client.send_file(\n                chat_id,\n                bio,\n                caption=caption,\n                reply_to=event.id  # sizin komandaya cavab (al\u0131nt\u0131) olsun\n            )\n\n            bio.close()\n\n        await msg.delete()\n\n    except Exception:\n        error_trace = traceback.format_exc()\n        bio = io.BytesIO()\n        bio.name = \"error.txt\"\n        bio.write(error_trace.encode())\n        bio.seek(0)\n        await client.send_file(\n            chat_id,\n            bio,\n            caption=f\"\u26a0\ufe0f .song X\u0259ta ba\u015f verdi:\\nMahn\u0131: {query}\"\n        )\n        await msg.edit(\"\u26a0\ufe0f X\u0259ta ba\u015f verdi. Detallar g\u00f6nd\u0259rildi.\")",
    "import asyncio\nfrom io import BytesIO\nfrom telethon import events\nimport edge_tts\n\n@client.on(events.NewMessage(pattern=r'^\\.speak(?: |$)(.*)'))\nasync def speak(event):\n    try:\n        args = event.pattern_match.group(1).split(\" \", 1)\n\n        # Default s\u0259s: q\u0131z\n        voice = \"az-AZ-BanuNeural\"\n        text = \"\"\n\n        if args:\n            if args[0].lower() == \"oq\":  # o\u011flan s\u0259si\n                voice = \"az-AZ-BabekNeural\"\n                if len(args) > 1:\n                    text = args[1]\n            elif args[0].lower() == \"qz\":  # q\u0131z s\u0259si\n                voice = \"az-AZ-BanuNeural\"\n                if len(args) > 1:\n                    text = args[1]\n            else:\n                text = event.pattern_match.group(1)\n\n        if not text:\n            return await event.edit(\"\u26a0\ufe0f \u0130stifad\u0259: .speak [oq|qz] m\u0259tn\")\n\n        await event.edit(\"\ud83c\udf99\ufe0f S\u0259s haz\u0131rlan\u0131r...\")\n\n        # S\u0259si yarat\n        mp3 = BytesIO()\n        communicate = edge_tts.Communicate(text, voice)\n        async for chunk in communicate.stream():\n            if chunk[\"type\"] == \"audio\":\n                mp3.write(chunk[\"data\"])\n        mp3.seek(0)\n        mp3.name = \"voice.ogg\"\n\n        # Voice g\u00f6nd\u0259r (reply varsa ona cavab versin)\n        await event.client.send_file(\n            event.chat_id,\n            mp3,\n            voice_note=True,\n            reply_to=event.reply_to_msg_id\n        )\n\n        await event.delete()\n        mp3.close()\n\n    except Exception as e:\n        await event.edit(f\"\u26a0\ufe0f X\u0259ta: {e}\")",
    "import asyncio\nfrom telethon import events\nfrom telethon.tl.functions.messages import GetStickerSetRequest\nfrom telethon.tl.types import InputStickerSetShortName\nfrom io import BytesIO\nfrom PIL import Image, ImageDraw, ImageFont\nimport emoji\nimport random\n\nSTICKER_PACK = \"niggerstt\"\nFONT_PATH = \"arial.ttf\"\nBASE_FONT_SIZE = 48\n\ndef get_text_size(draw, text, font):\n    bbox = draw.textbbox((0,0), text, font=font)\n    width = bbox[2] - bbox[0]\n    height = bbox[3] - bbox[1]\n    return width, height\n\n@client.on(events.NewMessage(pattern=r\"^\\.stc(?: |$)(.*)\"))\nasync def create_sticker(event):\n    user_text = event.pattern_match.group(1).strip()\n\n    # RP mesaj\u0131 yox, yaln\u0131z .stic <m\u0259tin>\n    if event.is_reply:\n        reply_msg_id = event.reply_to_msg_id\n    else:\n        reply_msg_id = None\n\n    if not user_text:\n        return await event.edit(\"\u26a0\ufe0f .stc \u00fc\u00e7\u00fcn mesaj yaz\u0131n.\")\n\n    await event.edit(\"Sticker haz\u0131rlan\u0131r...\")\n\n    try:\n        # Emoji d\u0259st\u0259yi\n        user_text = emoji.emojize(user_text, language='alias')\n\n        # Stiker paketi\n        stickerset = await client(GetStickerSetRequest(\n            stickerset=InputStickerSetShortName(STICKER_PACK),\n            hash=0\n        ))\n        stickers = stickerset.documents\n        if not stickers:\n            return await event.edit(\"\u26a0\ufe0f Stiker paketi bo\u015fdur!\")\n\n        # Random stiker se\u00e7\n        st = random.choice(stickers)\n        st_file = await client.download_media(st, bytes)\n\n        # Image \u00e7evrilir\n        img = Image.open(BytesIO(st_file)).convert(\"RGBA\")\n        draw = ImageDraw.Draw(img)\n\n        # Font\n        try:\n            font = ImageFont.truetype(FONT_PATH, BASE_FONT_SIZE)\n        except:\n            font = ImageFont.load_default()\n\n        # S\u0259tirl\u0259r\u0259 b\u00f6lm\u0259k\n        max_width = img.width - 40\n        lines = []\n        words = user_text.split()\n        line = \"\"\n        for word in words:\n            test_line = f\"{line} {word}\".strip()\n            w, _ = get_text_size(draw, test_line, font)\n            if w <= max_width:\n                line = test_line\n            else:\n                lines.append(line)\n                line = word\n        if line:\n            lines.append(line)\n\n        # M\u0259tni m\u0259rk\u0259zl\u0259\u015fdirm\u0259k v\u0259 qal\u0131n kontur il\u0259 yazmaq\n        total_text_height = sum([get_text_size(draw, l, font)[1]+10 for l in lines])\n        current_y = (img.height - total_text_height)//2\n        for line in lines:\n            w, h = get_text_size(draw, line, font)\n            x = (img.width - w)//2\n            # Qara kontur daha qal\u0131n\n            for dx in range(-3,4):\n                for dy in range(-3,4):\n                    draw.text((x+dx, current_y+dy), line, font=font, fill=(0,0,0))\n            # A\u011f \u0259sas m\u0259tn\n            draw.text((x, current_y), line, font=font, fill=(255,255,255))\n            current_y += h + 10\n\n        # G\u00f6nd\u0259r\n        bio = BytesIO()\n        img.save(bio, \"WEBP\")\n        bio.name = \"sticker.webp\"\n        bio.seek(0)\n        await event.client.send_file(event.chat_id, file=bio, reply_to=reply_msg_id)\n        await event.delete()\n        bio.close()\n\n    except Exception as e:\n        await event.edit(f\"\u26a0\ufe0f X\u0259ta ba\u015f verdi: {e}\")",
    "# sozoyunu.py \u2014 Soz Oyunu avtomatik cavablay\u0131c\u0131\n# soz_oyunu.json fayl\u0131n\u0131 istifad\u0259 edir (\u0259l il\u0259 \u0259lav\u0259 edirs\u0259n)\n\nimport json\nimport os\nimport random\nimport asyncio\nfrom telethon import events\n\nGAME_BOT = \"SozOyunuSOBot\"   # oyun botunun username-i\nDICT_FILE = \"soz_oyunu.json\" # s\u00f6zl\u00fck saxlanaca\u011f\u0131 json fayl\u0131\n\nACTIVE = False\n\n# JSON fayl\u0131n\u0131 oxu\ndef load_dict():\n    if os.path.exists(DICT_FILE):\n        with open(DICT_FILE, \"r\", encoding=\"utf-8\") as f:\n            try:\n                return json.load(f)\n            except:\n                return {}\n    return {}\n\n# JSON fayl\u0131 format\u0131 n\u00fcmun\u0259:\n# {\n#   \"alma\": [\"alma\", \"lam\", \"mal\", \"al\"],\n#   \"qap\u0131\": [\"qap\u0131\", \"ap\", \"paq\"]\n# }\n\n@client.on(events.NewMessage(pattern=r'^\\.sozauto (start|stop)$'))\nasync def sozauto_toggle(event):\n    global ACTIVE\n    cmd = event.pattern_match.group(1)\n    if cmd == \"start\":\n        ACTIVE = True\n        await event.edit(\"\u2705 Soz Oyunu auto cavab a\u00e7\u0131ld\u0131.\")\n    else:\n        ACTIVE = False\n        await event.edit(\"\u26d4 Soz Oyunu auto cavab ba\u011fland\u0131.\")\n\n# Oyun ba\u015flad\u0131qda izl\u0259yici\n@client.on(events.NewMessage(from_users=GAME_BOT))\nasync def sozoyunu_listener(event):\n    global ACTIVE\n    if not ACTIVE:\n        return\n\n    text = (event.raw_text or \"\").strip()\n    if \"Oyun ba\u015flad\u0131\" in text and \"s\u00f6zd\u0259n s\u00f6zl\u0259r d\u00fcz\u0259ldin\" in text:\n        # \u0259sas s\u00f6z\u00fc \u00e7\u0131xart\n        lines = text.split(\"\\n\")\n        if len(lines) < 2:\n            return\n        base_word = lines[-1].strip().lower()\n        word_len = len(base_word)\n\n        soz_dict = load_dict()\n\n        if base_word not in soz_dict:\n            return await event.reply(\"\u2139\ufe0f Bu s\u00f6z \u00fc\u00e7\u00fcn l\u00fc\u011f\u0259td\u0259 he\u00e7 n\u0259 tap\u0131lmad\u0131.\")\n\n        # uy\u011fun uzunluqdak\u0131 s\u00f6zl\u0259ri g\u00f6t\u00fcr\n        words = [w for w in soz_dict[base_word] if len(w) == word_len]\n\n        if not words:\n            return await event.reply(f\"\u2139\ufe0f {word_len} h\u0259rfli s\u00f6z tap\u0131lmad\u0131.\")\n\n        # random se\u00e7im (t\u0259krarlar\u0131 az g\u00f6st\u0259rsin dey\u0259)\n        word = random.choice(words)\n\n        # insan effekti \u00fc\u00e7\u00fcn gecikm\u0259\n        await asyncio.sleep(random.uniform(1.0, 2.5))\n        await event.respond(word)",
    "import asyncio\nimport datetime\nimport speedtest\nfrom telethon import events\n\nSTART_TIME_FILE = \"uptime_start.txt\"\n\n# Ba\u015flan\u011f\u0131c vaxt\u0131n\u0131 saxlay\u0131r\u0131q\ntry:\n    with open(START_TIME_FILE) as f:\n        START_TIME = datetime.datetime.fromisoformat(f.read().strip())\nexcept:\n    START_TIME = datetime.datetime.now()\n    with open(START_TIME_FILE, \"w\") as f:\n        f.write(START_TIME.isoformat())\n\ndef get_uptime():\n    now = datetime.datetime.now()\n    delta = now - START_TIME\n    days, remainder = divmod(delta.total_seconds(), 86400)\n    hours, remainder = divmod(remainder, 3600)\n    minutes, seconds = divmod(remainder, 60)\n    return f\"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s\"\n\nasync def get_internet_speed():\n    try:\n        st = speedtest.Speedtest()\n        st.get_best_server()\n        download = st.download() / 1024 / 1024  # MBps\n        upload = st.upload() / 1024 / 1024\n        return f\"\ud83c\udf10 \u0130nternet: \u2b07\ufe0f {download:.2f} Mbps | \u2b06\ufe0f {upload:.2f} Mbps\"\n    except:\n        return \"\ud83c\udf10 \u0130nternet: S\u00fcr\u0259t yoxlan\u0131lmad\u0131 \u26a0\ufe0f\"\n\n@client.on(events.NewMessage(pattern=r'\\.live'))\nasync def live_status(event):\n    sender = await event.get_sender()\n    uptime = get_uptime()\n    internet_info = await get_internet_speed()\n    status = \"\ud83d\udfe2 Online\"\n    dashboard = (\n        f\"\u23f1 \u0130\u015fl\u0259m\u0259 vaxt\u0131: {uptime}\\n\"\n        f\"{internet_info}\\n\"\n        f\"\ud83d\udd39 Owner: {sender.first_name}\\n\"\n        f\"\ud83d\udd39 Status: {status}\"\n    )\n    await event.edit(dashboard)",
    "@client.on(events.NewMessage(pattern=r'\\.del'))\nasync def delete_message(event):\n    # Reply yoxdursa x\u0259b\u0259rdarl\u0131q\n    if not event.is_reply:\n        return await event.edit(\"\u26a0\ufe0f .del \u00fc\u00e7\u00fcn reply edin.\")\n    \n    replied = await event.get_reply_message()\n    chat = await event.get_chat()\n\n    try:\n        # Reply edilmi\u015f mesaj\u0131 sil\n        await client.delete_messages(chat.id, replied.id)\n        # \u00d6z .del mesaj\u0131n\u0131 da sil\n        await client.delete_messages(chat.id, event.id)\n    except Exception as e:\n        await event.respond(f\"\u274c X\u0259ta ba\u015f verdi: {e}\")",
    "from telethon import events, functions\nfrom io import BytesIO\nimport html\n\n# RAM backup: { me_id: {first_name, last_name, about, photo_bytes} }\n_BACKUP = {}\n\nasync def _save_backup(client, me):\n    if me.id in _BACKUP:\n        return\n    about = \"\"\n    try:\n        full = await client(functions.users.GetFullUserRequest(me.id))\n        about = getattr(full, \"about\", \"\") or \"\"\n    except:\n        pass\n    photo_bytes = None\n    photos = await client.get_profile_photos(me, limit=1)\n    if photos:\n        bio = BytesIO()\n        await client.download_media(photos[0], file=bio)\n        bio.seek(0)\n        if bio.getbuffer().nbytes > 0:\n            bio.name = \"photo.jpg\"\n            photo_bytes = bio.getvalue()\n    _BACKUP[me.id] = {\n        \"first_name\": me.first_name or \"\",\n        \"last_name\": me.last_name or \"\",\n        \"about\": about,\n        \"photo_bytes\": photo_bytes\n    }\n\nasync def _set_profile(client, first, last, about, photo_bytes, replace_photo=True):\n    await client(functions.account.UpdateProfileRequest(\n        first_name=first or \"\",\n        last_name=last or \"\",\n        about=about or \"\"\n    ))\n    if photo_bytes:\n        # silinmi\u015f \u015f\u0259kil varsa, \u0259vv\u0259lc\u0259 sil\n        if replace_photo:\n            # b\u00fct\u00fcn m\u00f6vcud profil \u015f\u0259kill\u0259rini sil\n            photos = await client.get_profile_photos('me')\n            if photos:\n                await client(functions.photos.DeletePhotosRequest(id=photos))\n        bio = BytesIO(photo_bytes)\n        bio.name = \"photo.jpg\"\n        uploaded_file = await client.upload_file(bio)\n        await client(functions.photos.UploadProfilePhotoRequest(file=uploaded_file))\n\n@client.on(events.NewMessage(pattern=r'^\\.klon$', outgoing=True))\nasync def klon(event):\n    if not event.is_reply:\n        return await event.edit(\"\u26a0\ufe0f .klon \u00fc\u00e7\u00fcn reply edin.\")\n    reply_message = await event.get_reply_message()\n    user = await reply_message.get_sender()\n    me = await event.client.get_me()\n    if not user or user.bot or user.id == me.id:\n        return await event.edit(\"\u26a0\ufe0f Uy\u011fun istifad\u0259\u00e7i tap\u0131lmad\u0131.\")\n    \n    # Backup\n    await _save_backup(event.client, me)\n\n    # Target info\n    first_name = html.escape(user.first_name or \"\")\n    last_name = html.escape(user.last_name or \"\u206a\u206c\u206e\u206e\u206e\u206e \u200c\u200c\u200c\u200c\")\n    about = \"\"\n    try:\n        full = await event.client(functions.users.GetFullUserRequest(user.id))\n        about = html.escape(getattr(full, \"about\", \"\") or \"\")\n    except:\n        pass\n\n    # Profile photo\n    photo_bytes = None\n    photos = await event.client.get_profile_photos(user.id, limit=1)\n    if photos:\n        bio = BytesIO()\n        await event.client.download_media(photos[0], file=bio)\n        bio.seek(0)\n        if bio.getbuffer().nbytes > 0:\n            bio.name = \"photo.jpg\"\n            photo_bytes = bio.getvalue()\n\n    try:\n        await _set_profile(event.client, first_name, last_name, about, photo_bytes, replace_photo=True)\n        await event.edit(\"Haha s\u0259ni klonlad\u0131m \ud83e\udd21\")\n    except Exception as e:\n        await event.edit(f\"\u274c Klon al\u0131nmad\u0131: {e}\")\n\n@client.on(events.NewMessage(pattern=r'^\\.unklon$', outgoing=True))\nasync def unklon(event):\n    me = await event.client.get_me()\n    backup = _BACKUP.get(me.id)\n    if not backup:\n        return await event.edit(\"\u26a0\ufe0f Backup tap\u0131lmad\u0131. \u018fvv\u0259lc\u0259 .klon istifad\u0259 et.\")\n    try:\n        # klonlanan \u015f\u0259kli sil, backup-dak\u0131 \u015f\u0259kli geri \u0259lav\u0259 et\n        await _set_profile(event.client,\n                           backup[\"first_name\"],\n                           backup[\"last_name\"],\n                           backup[\"about\"],\n                           backup[\"photo_bytes\"],\n                           replace_photo=True)\n        _BACKUP.pop(me.id, None)\n        await event.edit(\"Profil u\u011furla \u0259vv\u0259lki v\u0259ziyy\u0259t\u0259 qaytar\u0131ld\u0131 Boss \ud83e\udd77\")\n    except Exception as e:\n        await event.edit(f\"\u274c B\u0259rpa al\u0131nmad\u0131: {e}\")"
  ]
}
